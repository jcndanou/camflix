# Generated by Django 5.2.6 on 2025-09-22 18:56

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tmdb_id', models.IntegerField(unique=True, verbose_name='TMDB ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('name_fr', models.CharField(blank=True, max_length=100, verbose_name='name (French)')),
            ],
            options={
                'verbose_name': 'genre',
                'verbose_name_plural': 'genres',
                'db_table': 'genres',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tmdb_id', models.IntegerField(db_index=True, unique=True, verbose_name='TMDB ID')),
                ('imdb_id', models.CharField(blank=True, db_index=True, max_length=20, verbose_name='IMDB ID')),
                ('title', models.CharField(max_length=500, verbose_name='title')),
                ('original_title', models.CharField(max_length=500, verbose_name='original title')),
                ('title_fr', models.CharField(blank=True, max_length=500, verbose_name='title (French)')),
                ('overview', models.TextField(blank=True, verbose_name='overview')),
                ('overview_fr', models.TextField(blank=True, verbose_name='overview (French)')),
                ('tagline', models.CharField(blank=True, max_length=500, verbose_name='tagline')),
                ('release_date', models.DateField(blank=True, null=True, verbose_name='release date')),
                ('runtime', models.IntegerField(blank=True, help_text='Runtime in minutes', null=True, verbose_name='runtime')),
                ('poster_path', models.CharField(blank=True, max_length=255, verbose_name='poster path')),
                ('backdrop_path', models.CharField(blank=True, max_length=255, verbose_name='backdrop path')),
                ('popularity', models.FloatField(default=0, verbose_name='popularity')),
                ('vote_average', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='vote average')),
                ('vote_count', models.IntegerField(default=0, verbose_name='vote count')),
                ('budget', models.BigIntegerField(default=0, verbose_name='budget')),
                ('revenue', models.BigIntegerField(default=0, verbose_name='revenue')),
                ('original_language', models.CharField(default='en', max_length=10, verbose_name='original language')),
                ('adult', models.BooleanField(default=False, verbose_name='adult content')),
                ('status', models.CharField(choices=[('Released', 'Released'), ('Upcoming', 'Upcoming'), ('In Production', 'In Production'), ('Canceled', 'Canceled')], default='Released', max_length=20, verbose_name='status')),
                ('last_tmdb_sync', models.DateTimeField(blank=True, null=True, verbose_name='last TMDB sync')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('genres', models.ManyToManyField(blank=True, related_name='movies', to='movies.genre')),
            ],
            options={
                'verbose_name': 'movie',
                'verbose_name_plural': 'movies',
                'db_table': 'movies',
                'ordering': ['-popularity', '-release_date'],
            },
        ),
        migrations.CreateModel(
            name='MovieList',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('list_type', models.CharField(choices=[('watchlist', 'Watchlist'), ('favorites', 'Favorites'), ('custom', 'Custom')], default='custom', max_length=20, verbose_name='list type')),
                ('is_public', models.BooleanField(default=False, verbose_name='public')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='movie_lists', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'movie list',
                'verbose_name_plural': 'movie lists',
                'db_table': 'movie_lists',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='MovieListItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=0, verbose_name='order')),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.movie')),
                ('movie_list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.movielist')),
            ],
            options={
                'verbose_name': 'movie list item',
                'verbose_name_plural': 'movie list items',
                'db_table': 'movie_list_items',
                'ordering': ['order', '-added_at'],
                'unique_together': {('movie_list', 'movie')},
            },
        ),
        migrations.AddField(
            model_name='movielist',
            name='movies',
            field=models.ManyToManyField(related_name='in_lists', through='movies.MovieListItem', to='movies.movie'),
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tmdb_id', models.IntegerField(unique=True, verbose_name='TMDB ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('biography', models.TextField(blank=True, verbose_name='biography')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='birthday')),
                ('deathday', models.DateField(blank=True, null=True, verbose_name='deathday')),
                ('place_of_birth', models.CharField(blank=True, max_length=255, verbose_name='place of birth')),
                ('profile_path', models.CharField(blank=True, max_length=255, verbose_name='profile path')),
                ('popularity', models.FloatField(default=0, verbose_name='popularity')),
                ('person_type', models.CharField(choices=[('actor', 'Actor'), ('director', 'Director'), ('producer', 'Producer'), ('writer', 'Writer')], default='actor', max_length=20, verbose_name='person type')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'person',
                'verbose_name_plural': 'persons',
                'db_table': 'persons',
                'ordering': ['-popularity', 'name'],
                'indexes': [models.Index(fields=['tmdb_id'], name='persons_tmdb_id_5da132_idx'), models.Index(fields=['name'], name='persons_name_9c6d3a_idx'), models.Index(fields=['-popularity'], name='persons_popular_84765c_idx')],
            },
        ),
        migrations.CreateModel(
            name='MovieCast',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('character', models.CharField(blank=True, max_length=255, verbose_name='character')),
                ('order', models.IntegerField(default=0, verbose_name='order')),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cast', to='movies.movie')),
                ('actor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.person')),
            ],
            options={
                'verbose_name': 'movie cast',
                'verbose_name_plural': 'movie casts',
                'db_table': 'movie_cast',
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='movie',
            name='actors',
            field=models.ManyToManyField(blank=True, related_name='acted_in_movies', through='movies.MovieCast', to='movies.person'),
        ),
        migrations.AddField(
            model_name='movie',
            name='directors',
            field=models.ManyToManyField(blank=True, limit_choices_to={'person_type': 'director'}, related_name='directed_movies', to='movies.person'),
        ),
        migrations.AddIndex(
            model_name='movielist',
            index=models.Index(fields=['user', 'list_type'], name='movie_lists_user_id_ba7c15_idx'),
        ),
        migrations.AddIndex(
            model_name='movielist',
            index=models.Index(fields=['is_public'], name='movie_lists_is_publ_63736c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='movielist',
            unique_together={('user', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='moviecast',
            unique_together={('movie', 'actor', 'character')},
        ),
        migrations.AddIndex(
            model_name='movie',
            index=models.Index(fields=['title'], name='movies_title_179e04_idx'),
        ),
        migrations.AddIndex(
            model_name='movie',
            index=models.Index(fields=['release_date'], name='movies_release_e1d0b4_idx'),
        ),
        migrations.AddIndex(
            model_name='movie',
            index=models.Index(fields=['-popularity'], name='movies_popular_74d716_idx'),
        ),
        migrations.AddIndex(
            model_name='movie',
            index=models.Index(fields=['-vote_average'], name='movies_vote_av_59cd2e_idx'),
        ),
        migrations.AddIndex(
            model_name='movie',
            index=models.Index(fields=['tmdb_id'], name='movies_tmdb_id_472987_idx'),
        ),
    ]
