# Generated by Django 5.2.6 on 2025-09-22 18:56

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('movies', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(help_text='Rating score from 0 to 100', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='score')),
                ('tier', models.CharField(blank=True, choices=[('terrible', 'Terrible (0-10%)'), ('bad', 'Bad (10-30%)'), ('mediocre', 'Mediocre (30-50%)'), ('decent', 'Decent (50-70%)'), ('good', 'Good (70-85%)'), ('great', 'Great (85-95%)'), ('superb', 'Superb (95-100%)')], max_length=20, verbose_name='tier')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='movies.movie')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'rating',
                'verbose_name_plural': 'ratings',
                'db_table': 'ratings',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=200, verbose_name='title')),
                ('content', models.TextField(max_length=5000, verbose_name='content')),
                ('spoiler_warning', models.BooleanField(default=False, verbose_name='contains spoilers')),
                ('moderation_status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('flagged', 'Flagged')], default='pending', max_length=20, verbose_name='moderation status')),
                ('moderation_notes', models.TextField(blank=True, verbose_name='moderation notes')),
                ('moderated_at', models.DateTimeField(blank=True, null=True, verbose_name='moderated at')),
                ('likes_count', models.IntegerField(default=0, verbose_name='likes count')),
                ('dislikes_count', models.IntegerField(default=0, verbose_name='dislikes count')),
                ('comments_count', models.IntegerField(default=0, verbose_name='comments count')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('moderated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderated_reviews', to=settings.AUTH_USER_MODEL)),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='movies.movie')),
                ('rating', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='review', to='ratings.rating')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'review',
                'verbose_name_plural': 'reviews',
                'db_table': 'reviews',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewComment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField(max_length=1000, verbose_name='content')),
                ('is_flagged', models.BooleanField(default=False, verbose_name='is flagged')),
                ('is_hidden', models.BooleanField(default=False, verbose_name='is hidden')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='ratings.reviewcomment')),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='ratings.review')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'review comment',
                'verbose_name_plural': 'review comments',
                'db_table': 'review_comments',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewReaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reaction_type', models.CharField(choices=[('like', 'Like'), ('dislike', 'Dislike')], max_length=10, verbose_name='reaction type')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reactions', to='ratings.review')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_reactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'review reaction',
                'verbose_name_plural': 'review reactions',
                'db_table': 'review_reactions',
            },
        ),
        migrations.AddIndex(
            model_name='rating',
            index=models.Index(fields=['user', 'movie'], name='ratings_user_id_a083ff_idx'),
        ),
        migrations.AddIndex(
            model_name='rating',
            index=models.Index(fields=['score'], name='ratings_score_317b45_idx'),
        ),
        migrations.AddIndex(
            model_name='rating',
            index=models.Index(fields=['tier'], name='ratings_tier_3ae5e7_idx'),
        ),
        migrations.AddIndex(
            model_name='rating',
            index=models.Index(fields=['-updated_at'], name='ratings_updated_bbc91e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='rating',
            unique_together={('user', 'movie')},
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['user', 'movie'], name='reviews_user_id_d46e47_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['moderation_status'], name='reviews_moderat_c520a4_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['-created_at'], name='reviews_created_6c5dce_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['-likes_count'], name='reviews_likes_c_e65de5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('user', 'movie')},
        ),
        migrations.AddIndex(
            model_name='reviewcomment',
            index=models.Index(fields=['review'], name='review_comm_review__321fde_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewcomment',
            index=models.Index(fields=['parent'], name='review_comm_parent__273593_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewcomment',
            index=models.Index(fields=['created_at'], name='review_comm_created_268700_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewreaction',
            index=models.Index(fields=['review', 'reaction_type'], name='review_reac_review__49a234_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='reviewreaction',
            unique_together={('user', 'review')},
        ),
    ]
