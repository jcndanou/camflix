# Generated by Django 5.2.6 on 2025-09-22 18:56

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('movies', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='RecommendationProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genre_preferences', models.JSONField(default=dict, help_text='Computed genre preference scores', verbose_name='genre preferences')),
                ('director_preferences', models.JSONField(default=dict, help_text='Computed director preference scores', verbose_name='director preferences')),
                ('actor_preferences', models.JSONField(default=dict, help_text='Computed actor preference scores', verbose_name='actor preferences')),
                ('average_rating', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='average rating')),
                ('rating_std_dev', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='rating standard deviation')),
                ('tier_distribution', models.JSONField(default=dict, help_text='Distribution of user ratings across tiers', verbose_name='tier distribution')),
                ('similar_users', models.JSONField(default=list, help_text='List of most similar user IDs with scores', verbose_name='similar users')),
                ('last_calculated', models.DateTimeField(auto_now=True, verbose_name='last calculated')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='recommendation_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'recommendation profile',
                'verbose_name_plural': 'recommendation profiles',
                'db_table': 'recommendation_profiles',
            },
        ),
        migrations.CreateModel(
            name='Recommendation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('recommendation_type', models.CharField(choices=[('collaborative', 'Collaborative Filtering'), ('content', 'Content-Based'), ('hybrid', 'Hybrid'), ('trending', 'Trending'), ('genre', 'Genre-Based'), ('director', 'Director-Based'), ('actor', 'Actor-Based')], default='hybrid', max_length=20, verbose_name='recommendation type')),
                ('confidence_score', models.FloatField(help_text='Confidence in the recommendation (0-1)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='confidence score')),
                ('predicted_rating', models.FloatField(help_text='Predicted rating (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='predicted rating')),
                ('reason', models.TextField(blank=True, help_text='Explanation for why this movie was recommended', verbose_name='reason')),
                ('similar_users', models.JSONField(blank=True, default=list, help_text='IDs of similar users who liked this movie')),
                ('is_seen', models.BooleanField(default=False, verbose_name='is seen')),
                ('is_dismissed', models.BooleanField(default=False, verbose_name='is dismissed')),
                ('user_feedback', models.CharField(blank=True, choices=[('helpful', 'Helpful'), ('not_helpful', 'Not Helpful'), ('already_seen', 'Already Seen'), ('not_interested', 'Not Interested')], max_length=20, verbose_name='user feedback')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name='expires at')),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommended_to', to='movies.movie')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'recommendation',
                'verbose_name_plural': 'recommendations',
                'db_table': 'recommendations',
                'ordering': ['-confidence_score', '-created_at'],
                'indexes': [models.Index(fields=['user', 'is_seen', 'is_dismissed'], name='recommendat_user_id_289567_idx'), models.Index(fields=['-confidence_score'], name='recommendat_confide_8245ce_idx'), models.Index(fields=['recommendation_type'], name='recommendat_recomme_a6aa95_idx'), models.Index(fields=['created_at'], name='recommendat_created_02802f_idx'), models.Index(fields=['expires_at'], name='recommendat_expires_f19a2e_idx')],
                'unique_together': {('user', 'movie')},
            },
        ),
        migrations.CreateModel(
            name='RecommendationBatch',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('batch_size', models.IntegerField(default=0, verbose_name='batch size')),
                ('algorithm_version', models.CharField(max_length=50, verbose_name='algorithm version')),
                ('parameters', models.JSONField(default=dict, help_text='Parameters used for generating this batch', verbose_name='parameters')),
                ('generation_time', models.FloatField(help_text='Time taken to generate recommendations in seconds', verbose_name='generation time')),
                ('accuracy_score', models.FloatField(blank=True, help_text='Measured accuracy of recommendations if available', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='accuracy score')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendation_batches', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'recommendation batch',
                'verbose_name_plural': 'recommendation batches',
                'db_table': 'recommendation_batches',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', '-created_at'], name='recommendat_user_id_1f916e_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserSimilarity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('similarity_score', models.FloatField(help_text='Similarity score between 0 and 1', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='similarity score')),
                ('common_movies_count', models.IntegerField(default=0, help_text='Number of movies both users have rated', verbose_name='common movies count')),
                ('calculation_method', models.CharField(choices=[('pearson', 'Pearson Correlation'), ('cosine', 'Cosine Similarity'), ('euclidean', 'Euclidean Distance'), ('jaccard', 'Jaccard Index')], default='pearson', max_length=50, verbose_name='calculation method')),
                ('calculated_at', models.DateTimeField(auto_now=True)),
                ('user1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similarities_as_user1', to=settings.AUTH_USER_MODEL)),
                ('user2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similarities_as_user2', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user similarity',
                'verbose_name_plural': 'user similarities',
                'db_table': 'user_similarities',
                'indexes': [models.Index(fields=['user1', 'user2'], name='user_simila_user1_i_4a59b8_idx'), models.Index(fields=['-similarity_score'], name='user_simila_similar_ccf438_idx'), models.Index(fields=['calculated_at'], name='user_simila_calcula_19ed1b_idx')],
                'unique_together': {('user1', 'user2')},
            },
        ),
    ]
