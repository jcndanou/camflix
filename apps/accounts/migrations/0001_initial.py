# Generated by Django 5.2.6 on 2025-09-22 18:56

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserPreferences',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_rating_for_recommendation', models.IntegerField(default=70, help_text='Minimum rating (0-100) a movie must have to be recommended', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='minimum rating for recommendation')),
                ('include_adult_content', models.BooleanField(default=False, verbose_name='include adult content')),
                ('recommendation_frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('biweekly', 'Bi-weekly'), ('monthly', 'Monthly'), ('never', 'Never')], default='weekly', max_length=20, verbose_name='recommendation frequency')),
                ('items_per_page', models.IntegerField(choices=[(10, '10'), (20, '20'), (50, '50'), (100, '100')], default=20, verbose_name='items per page')),
                ('default_sort_order', models.CharField(choices=[('rating_desc', 'Rating (High to Low)'), ('rating_asc', 'Rating (Low to High)'), ('date_desc', 'Date (Newest First)'), ('date_asc', 'Date (Oldest First)'), ('title_asc', 'Title (A to Z)'), ('title_desc', 'Title (Z to A)')], default='rating_desc', max_length=20, verbose_name='default sort order')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'user preferences',
                'verbose_name_plural': 'user preferences',
                'db_table': 'user_preferences',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('bio', models.TextField(blank=True, max_length=500, verbose_name='biography')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/', verbose_name='avatar')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='birth date')),
                ('preferred_language', models.CharField(choices=[('fr', 'Fran√ßais'), ('en', 'English')], default='fr', max_length=10, verbose_name='preferred language')),
                ('is_profile_complete', models.BooleanField(default=False)),
                ('email_notifications', models.BooleanField(default=True, help_text='Receive email notifications for recommendations and updates', verbose_name='email notifications')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('last_activity', models.DateTimeField(auto_now=True, verbose_name='last activity')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserFollowing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('followed_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user following',
                'verbose_name_plural': 'user followings',
                'db_table': 'user_following',
            },
        ),
    ]
